# My Point Flutter App Makefile
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
FLUTTER = flutter
DART = dart
PROJECT_NAME = my_point

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

# –ü–æ–º–æ—â—å
.PHONY: help
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(GREEN)My Point Flutter App - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
.PHONY: setup
setup: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ My Point...$(NC)"
	$(FLUTTER) doctor
	$(FLUTTER) pub get
	$(DART) run build_runner build --delete-conflicting-outputs
	@echo "$(GREEN)‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

.PHONY: install
install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(FLUTTER) pub get
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

.PHONY: upgrade
upgrade: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(FLUTTER) pub upgrade
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
.PHONY: generate
generate: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ (build_runner, assets, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è)
	@echo "$(GREEN)üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...$(NC)"
	$(DART) run build_runner build --delete-conflicting-outputs
	$(FLUTTER) gen-l10n
	$(FLUTTER) packages pub run flutter_gen_runner
	@echo "$(GREEN)‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!$(NC)"

.PHONY: watch
watch: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
	@echo "$(GREEN)üëÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...$(NC)"
	$(DART) run build_runner watch --delete-conflicting-outputs

.PHONY: assets
assets: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å assets
	@echo "$(GREEN)üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è assets...$(NC)"
	$(FLUTTER) packages pub run flutter_gen_runner
	@echo "$(GREEN)‚úÖ Assets —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!$(NC)"

.PHONY: l10n
l10n: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
	@echo "$(GREEN)üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...$(NC)"
	$(FLUTTER) gen-l10n
	@echo "$(GREEN)‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!$(NC)"

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
.PHONY: run-dev
run-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (DEV)...$(NC)"
	$(FLUTTER) run -t lib/main_dev.dart --flavor dev

.PHONY: run-staging
run-staging: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ staging
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (STAGING)...$(NC)"
	$(FLUTTER) run -t lib/main_staging.dart --flavor staging

.PHONY: run-prod
run-prod: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ production
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (PRODUCTION)...$(NC)"
	$(FLUTTER) run -t lib/main_prod.dart --flavor production --release

.PHONY: run
run: run-dev ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é dev)

# –°–±–æ—Ä–∫–∞
.PHONY: build-apk-dev
build-apk-dev: ## –°–æ–±—Ä–∞—Ç—å APK –¥–ª—è dev
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ APK (DEV)...$(NC)"
	$(FLUTTER) build apk -t lib/main_dev.dart --flavor dev --release

.PHONY: build-apk-staging
build-apk-staging: ## –°–æ–±—Ä–∞—Ç—å APK –¥–ª—è staging
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ APK (STAGING)...$(NC)"
	$(FLUTTER) build apk -t lib/main_staging.dart --flavor staging --release

.PHONY: build-apk-prod
build-apk-prod: ## –°–æ–±—Ä–∞—Ç—å APK –¥–ª—è production
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ APK (PRODUCTION)...$(NC)"
	$(FLUTTER) build apk -t lib/main_prod.dart --flavor production --release

.PHONY: build-aab-dev
build-aab-dev: ## –°–æ–±—Ä–∞—Ç—å AAB –¥–ª—è dev
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ AAB (DEV)...$(NC)"
	$(FLUTTER) build appbundle -t lib/main_dev.dart --flavor dev --release

.PHONY: build-aab-staging
build-aab-staging: ## –°–æ–±—Ä–∞—Ç—å AAB –¥–ª—è staging
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ AAB (STAGING)...$(NC)"
	$(FLUTTER) build appbundle -t lib/main_staging.dart --flavor staging --release

.PHONY: build-aab-prod
build-aab-prod: ## –°–æ–±—Ä–∞—Ç—å AAB –¥–ª—è production
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ AAB (PRODUCTION)...$(NC)"
	$(FLUTTER) build appbundle -t lib/main_prod.dart --flavor production --release

.PHONY: build-ios-dev
build-ios-dev: ## –°–æ–±—Ä–∞—Ç—å iOS –¥–ª—è dev
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ iOS (DEV)...$(NC)"
	$(FLUTTER) build ios -t lib/main_dev.dart --flavor dev --release

.PHONY: build-ios-staging
build-ios-staging: ## –°–æ–±—Ä–∞—Ç—å iOS –¥–ª—è staging
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ iOS (STAGING)...$(NC)"
	$(FLUTTER) build ios -t lib/main_staging.dart --flavor staging --release

.PHONY: build-ios-prod
build-ios-prod: ## –°–æ–±—Ä–∞—Ç—å iOS –¥–ª—è production
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ iOS (PRODUCTION)...$(NC)"
	$(FLUTTER) build ios -t lib/main_prod.dart --flavor production --release

.PHONY: build-web
build-web: ## –°–æ–±—Ä–∞—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ Web...$(NC)"
	$(FLUTTER) build web --release

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
.PHONY: test
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(FLUTTER) test

.PHONY: test-coverage
test-coverage: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	$(FLUTTER) test --coverage
	genhtml coverage/lcov.info -o coverage/html

.PHONY: integration-test
integration-test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(FLUTTER) drive --driver=test_driver/integration_test.dart --target=integration_test/app_test.dart

# –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
.PHONY: analyze
analyze: ## –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
	@echo "$(GREEN)üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...$(NC)"
	$(FLUTTER) analyze

.PHONY: format
format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "$(GREEN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	$(DART) format lib/ test/

.PHONY: format-check
format-check: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(GREEN)‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	$(DART) format --output=none --set-exit-if-changed lib/ test/

.PHONY: lint
lint: analyze format-check ## –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞

# –ò–∫–æ–Ω–∫–∏ –∏ splash screen
.PHONY: icons-dev
icons-dev: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –¥–ª—è dev
	@echo "$(GREEN)üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ (DEV)...$(NC)"
	$(FLUTTER) pub run flutter_launcher_icons:main -f flutter_launcher_icons-dev.yaml

.PHONY: icons-staging
icons-staging: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –¥–ª—è staging
	@echo "$(GREEN)üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ (STAGING)...$(NC)"
	$(FLUTTER) pub run flutter_launcher_icons:main -f flutter_launcher_icons-stage.yaml

.PHONY: icons-prod
icons-prod: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –¥–ª—è production
	@echo "$(GREEN)üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ (PRODUCTION)...$(NC)"
	$(FLUTTER) pub run flutter_launcher_icons:main -f flutter_launcher_icons-prod.yaml

.PHONY: splash
splash: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å splash screen
	@echo "$(GREEN)üí´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è splash screen...$(NC)"
	$(FLUTTER) pub run flutter_native_splash:create -f main

.PHONY: icons-all
icons-all: icons-dev icons-staging icons-prod ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∫–æ–Ω–∫–∏

# –û—á–∏—Å—Ç–∫–∞
.PHONY: clean
clean: ## –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	$(FLUTTER) clean
	rm -rf build/
	rm -rf .dart_tool/
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω!$(NC)"

.PHONY: clean-all
clean-all: clean ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	rm -rf pubspec.lock
	cd ios && rm -rf Pods/ Podfile.lock
	cd android && ./gradlew clean
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

# Fastlane
.PHONY: android-beta
android-beta: ## –î–µ–ø–ª–æ–π Android –≤ beta (—á–µ—Ä–µ–∑ Fastlane)
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π Android beta...$(NC)"
	cd android && bundle exec fastlane beta

.PHONY: android-production
android-production: ## –î–µ–ø–ª–æ–π Android –≤ production (—á–µ—Ä–µ–∑ Fastlane)
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π Android production...$(NC)"
	cd android && bundle exec fastlane production

.PHONY: ios-beta
ios-beta: ## –î–µ–ø–ª–æ–π iOS –≤ TestFlight (—á–µ—Ä–µ–∑ Fastlane)
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π iOS beta...$(NC)"
	cd ios && bundle exec fastlane beta

.PHONY: ios-production
ios-production: ## –î–µ–ø–ª–æ–π iOS –≤ App Store (—á–µ—Ä–µ–∑ Fastlane)
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π iOS production...$(NC)"
	cd ios && bundle exec fastlane production

# –£—Ç–∏–ª–∏—Ç—ã
.PHONY: doctor
doctor: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Flutter
	@echo "$(GREEN)ü©∫ Flutter Doctor...$(NC)"
	$(FLUTTER) doctor -v

.PHONY: devices
devices: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	@echo "$(GREEN)üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:$(NC)"
	$(FLUTTER) devices

.PHONY: version
version: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(GREEN)üìã –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	@grep "version:" pubspec.yaml

.PHONY: deps-outdated
deps-outdated: ## –ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:$(NC)"
	$(FLUTTER) pub outdated

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
.PHONY: fresh-start
fresh-start: clean install generate ## –°–≤–µ–∂–∏–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!$(NC)"

.PHONY: full-build-android
full-build-android: clean install generate build-aab-prod ## –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ Android
	@echo "$(GREEN)üéâ Android —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

.PHONY: full-build-ios
full-build-ios: clean install generate build-ios-prod ## –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ iOS
	@echo "$(GREEN)üéâ iOS —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

.PHONY: pre-commit
pre-commit: format analyze test ## –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É!$(NC)"

# Git hooks
.PHONY: install-hooks
install-hooks: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å git hooks
	@echo "$(GREEN)ü™ù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ git hooks...$(NC)"
	@echo '#!/bin/sh\nmake pre-commit' > .git/hooks/pre-commit
	@chmod +x .git/hooks/pre-commit
	@echo "$(GREEN)‚úÖ Git hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
.DEFAULT_GOAL := help



